<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[collections模块使用]]></title>
      <url>/2017/10/13/collections%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="collections-namedtuple"><a href="#collections-namedtuple" class="headerlink" title="collections.namedtuple"></a><code>collections.namedtuple</code></h1><h3 id="collections-nametuple是一个工厂函数，主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性，-在访问一些tuple类型的数据时尤其好用。"><a href="#collections-nametuple是一个工厂函数，主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性，-在访问一些tuple类型的数据时尤其好用。" class="headerlink" title="collections.nametuple是一个工厂函数，主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性， 在访问一些tuple类型的数据时尤其好用。"></a>collections.nametuple是一个工厂函数，主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性， 在访问一些tuple类型的数据时尤其好用。</h3><p>用 <code>namedtuple</code> 构建的类的实例所消耗的内存跟元组是一样的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">比如我们用户拥有一个这样的数据结构，每一个对象是拥有三个元素的tuple。</span></div><div class="line"><span class="string">使用namedtuple方法就可以方便的通过tuple来生成可读性更高也更好用的数据结构。</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line">websites = [</div><div class="line">    (<span class="string">'Sohu'</span>, <span class="string">'http://www.google.com/'</span>, <span class="string">u'张朝阳'</span>),</div><div class="line">    (<span class="string">'Sina'</span>, <span class="string">'http://www.sina.com.cn/'</span>, <span class="string">u'王志东'</span>),</div><div class="line">    (<span class="string">'163'</span>, <span class="string">'http://www.163.com/'</span>, <span class="string">u'丁磊'</span>)</div><div class="line">]</div><div class="line">Website = namedtuple(<span class="string">'Website'</span>, [<span class="string">'name'</span>, <span class="string">'url'</span>, <span class="string">'founder'</span>])</div><div class="line"><span class="keyword">for</span> website <span class="keyword">in</span> websites:</div><div class="line">    website = Website._make(website)</div><div class="line">    <span class="keyword">print</span> website</div><div class="line"><span class="comment"># Result:</span></div><div class="line">Website(name=<span class="string">'Sohu'</span>, url=<span class="string">'http://www.google.com/'</span>, founder=<span class="string">u'\u5f20\u671d\u9633'</span>)</div><div class="line">Website(name=<span class="string">'Sina'</span>, url=<span class="string">'http://www.sina.com.cn/'</span>, founder=<span class="string">u'\u738b\u5fd7\u4e1c'</span>)</div><div class="line">Website(name=<span class="string">'163'</span>, url=<span class="string">'http://www.163.com/'</span>, founder=<span class="string">u'\u4e01\u78ca'</span>)</div></pre></td></tr></table></figure></p>
<ul>
<li><p><code>_fields</code> 属性是一个包含这个类所有字段名称的元组。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Website._fields</div><div class="line"><span class="comment">#Result:('name', 'url', 'founder')</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>_make()</code> 通过接受一个可迭代对象来生成这个类的一个实例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = (<span class="string">'Sohu'</span>, <span class="string">'http://www.google.com/'</span>, <span class="string">u'张朝阳'</span>)</div><div class="line">w1 = Website._make(a)</div><div class="line"><span class="comment">#out Website(name='Sohu', url='http://www.google.com/', founder='张朝阳')</span></div><div class="line"></div><div class="line"><span class="comment"># 跟 Website(*a)是一样的</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>_asdict()</code> 把具名元组以collections.OrderdDict形式返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">w1._asdict()</div><div class="line"><span class="comment"># Out:</span></div><div class="line">OrderedDict([(<span class="string">'name'</span>, <span class="string">'Sohu'</span>),</div><div class="line">             (<span class="string">'url'</span>, <span class="string">'http://www.google.com/'</span>),</div><div class="line">             (<span class="string">'founder'</span>, <span class="string">'张朝阳'</span>)])</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="双向队列-collections-deque"><a href="#双向队列-collections-deque" class="headerlink" title="双向队列 collections.deque"></a><code>双向队列</code> <em>collections.deque</em></h1><h3 id="deque其实是-double-ended-queue-的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列-头部快速增加和取出对象-popleft-appendleft"><a href="#deque其实是-double-ended-queue-的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列-头部快速增加和取出对象-popleft-appendleft" class="headerlink" title="deque其实是 double-ended queue 的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列 头部快速增加和取出对象: .popleft(), .appendleft()"></a>deque其实是 double-ended queue 的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列 头部快速增加和取出对象: .popleft(), .appendleft()</h3><p>双向队列从中间删除元素的操作会慢一些，因为它只对在头尾的操作进行了优化。</p>
<p><code>append</code> &amp;&amp; <code>popleft</code> 都是原子操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">下面这个是一个有趣的例子，主要使用了deque的rotate方法来实现了一个无限循环</span></div><div class="line"><span class="string">的加载动画</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">deque.rotate 接受一个参数n，当n &gt; 0 时，队列的最右边的n个元素会被移动到队列的左边,</span></div><div class="line"><span class="string">    当 n &lt; 0 时，最左边的 n 个元素会被移动到右边。</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line">fancy_loading = deque(<span class="string">'&gt;--------------------'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\r%s'</span> % <span class="string">''</span>.join(fancy_loading),</div><div class="line">    fancy_loading.rotate(<span class="number">1</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line">    time.sleep(<span class="number">0.08</span>)</div><div class="line"><span class="comment"># Result:</span></div><div class="line"><span class="comment"># 一个无尽循环的跑马灯</span></div><div class="line">-------------&gt;-------</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过指定队列的大小，可以实现队列用来存放“最近用到的几个元素”功能</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line">dq = deque(range(<span class="number">10</span>), maxlen=<span class="number">10</span>)</div><div class="line">dq.appendleft(<span class="number">-1</span>)</div><div class="line">dq.extend([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</div><div class="line">dq.extendleft([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</div></pre></td></tr></table></figure>
<h1 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">下面这个例子就是使用Counter模块统计一段句子里面所有字符出现次数</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">s = <span class="string">'''A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.'''</span>.lower()</div><div class="line">c = Counter(s)</div><div class="line"><span class="comment"># 获取出现频率最高的5个字符</span></div><div class="line"><span class="keyword">print</span> c.most_common(<span class="number">5</span>)</div><div class="line"><span class="comment"># Result:</span></div><div class="line">[(<span class="string">' '</span>, <span class="number">54</span>), (<span class="string">'e'</span>, <span class="number">32</span>), (<span class="string">'s'</span>, <span class="number">25</span>), (<span class="string">'a'</span>, <span class="number">24</span>), (<span class="string">'t'</span>, <span class="number">24</span>)]</div></pre></td></tr></table></figure>
<h1 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h1><h3 id="OrderedDict-会按key-进行排序"><a href="#OrderedDict-会按key-进行排序" class="headerlink" title="OrderedDict 会按key 进行排序"></a>OrderedDict 会按key 进行排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line">items = (</div><div class="line">    (<span class="string">'A'</span>, <span class="number">1</span>),</div><div class="line">    (<span class="string">'B'</span>, <span class="number">2</span>),</div><div class="line">    (<span class="string">'C'</span>, <span class="number">3</span>)</div><div class="line">)</div><div class="line">regular_dict = dict(items)</div><div class="line">ordered_dict = OrderedDict(items)</div><div class="line"><span class="keyword">print</span> <span class="string">'Regular Dict:'</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> regular_dict.items():</div><div class="line">    <span class="keyword">print</span> k, v</div><div class="line"><span class="keyword">print</span> <span class="string">'Ordered Dict:'</span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> ordered_dict.items():</div><div class="line">    <span class="keyword">print</span> k, v</div><div class="line"><span class="comment"># Result:</span></div><div class="line">Regular Dict:</div><div class="line">A <span class="number">1</span></div><div class="line">C <span class="number">3</span></div><div class="line">B <span class="number">2</span></div><div class="line">Ordered Dict:</div><div class="line">A <span class="number">1</span></div><div class="line">B <span class="number">2</span></div><div class="line">C <span class="number">3</span></div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[The First Blog.]]></title>
      <url>/2017/10/13/The-First-Blog/</url>
      <content type="html"></content>
      
        
    </entry>
    
  
  
    
  
</search>
